{"ast":null,"code":"import { vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"for\"];\nconst _hoisted_2 = [\"id\", \"disabled\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"form-check-sign\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"form-check\", {\n      disabled: $props.disabled\n    }])\n  }, [_createElementVNode(\"label\", {\n    for: $data.cbId,\n    class: \"form-check-label\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    id: $data.cbId,\n    class: \"form-check-input\",\n    type: \"checkbox\",\n    disabled: $props.disabled,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.model = $event)\n  }, null, 8 /* PROPS */, _hoisted_2), [[_vModelCheckbox, $options.model]]), _hoisted_3], 8 /* PROPS */, _hoisted_1), _createElementVNode(\"span\", null, [_renderSlot(_ctx.$slots, \"default\")])], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_normalizeClass","disabled","$props","for","$data","cbId","id","type","$options","model","$event","_hoisted_3","_renderSlot","_ctx","$slots"],"sources":["D:\\WEB\\Servicios\\ProyectoFinal\\client\\src\\components\\Inputs\\BaseCheckbox.vue"],"sourcesContent":["<template>\n  <div class=\"form-check\" :class=\"{ disabled: disabled }\">\n    <label :for=\"cbId\" class=\"form-check-label\">\n      <input\n        :id=\"cbId\"\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        :disabled=\"disabled\"\n        v-model=\"model\"\n      />\n      <span class=\"form-check-sign\"></span>\n    </label>\n    <span>\n      <slot></slot>\n    </span>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\",\n  },\n  props: {\n    checked: [Array, Boolean],\n    disabled: [Boolean, String],\n    inline: Boolean,\n  },\n  data() {\n    return {\n      cbId: \"\",\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        this.$emit(\"input\", check);\n      },\n    },\n    inlineClass() {\n      if (this.inline) {\n        return `checkbox-inline`;\n      } else {\n        return \"\";\n      }\n    },\n  },\n  created() {\n    this.cbId = Math.random().toString(16).slice(2);\n  },\n};\n</script>\n"],"mappings":";;;gCAUMA,mBAAA,CAAqC;EAA/BC,KAAK,EAAC;AAAiB;;;uBATjCC,mBAAA,CAcM;IAdDD,KAAK,EAAAE,eAAA,EAAC,YAAY;MAAAC,QAAA,EAAqBC,MAAA,CAAAD;IAAQ;MAClDJ,mBAAA,CASQ;IATAM,GAAG,EAAEC,KAAA,CAAAC,IAAI;IAAEP,KAAK,EAAC;sBACvBD,mBAAA,CAME;IALCS,EAAE,EAAEF,KAAA,CAAAC,IAAI;IACTP,KAAK,EAAC,kBAAkB;IACxBS,IAAI,EAAC,UAAU;IACdN,QAAQ,EAAEC,MAAA,CAAAD,QAAQ;+DACVO,QAAA,CAAAC,KAAK,GAAAC,MAAA;0DAALF,QAAA,CAAAC,KAAK,E,GAEhBE,UAAqC,C,8BAEvCd,mBAAA,CAEO,eADLe,WAAA,CAAaC,IAAA,CAAAC,MAAA,a"},"metadata":{},"sourceType":"module","externalDependencies":[]}